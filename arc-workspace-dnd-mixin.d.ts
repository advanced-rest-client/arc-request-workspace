/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   arc-workspace-dnd-mixin.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

declare namespace ArcComponents {


  /**
   * This mixin is to reduce amount of code in `arc-request-workspace` element
   * and to separate drag and drop for tabs logic.
   */
  function ArcWorkspaceDndMixin<T extends new (...args: any[]) => {}>(base: T): T & ArcWorkspaceDndMixinConstructor;

  interface ArcWorkspaceDndMixinConstructor {
    new(...args: any[]): ArcWorkspaceDndMixin;
  }

  interface ArcWorkspaceDndMixin {
    readonly _dragPossible: Boolean|null;

    /**
     * Handles track event dispatched by `Polymer.Gestures` library.
     * This method calls corresponding method to current dragging state.
     */
    _handleTrack(e: CustomEvent|null): void;

    /**
     * Initializes the tracking of an element.
     *
     * @param e Original event from the Gestures library.
     */
    _onTrackStart(e: CustomEvent|null): void;

    /**
     * Called when the element is being tacked (moved).
     *
     * @param e Original event from the Gestures library.
     */
    _onTrack(e: CustomEvent|null): void;

    /**
     * Performs operation when the tab drop occurs.
     */
    _onTrackEnd(): void;

    /**
     * Sets `readonly` state on all editors
     */
    _blockEditors(): void;

    /**
     * Removes `readonly` state from all editors
     */
    _unblockEditors(): void;

    /**
     * Gets the top level item from the DOM repeater that has been marked as a
     * draggable item.
     * The event can originate from child elements which shouldn't be dragged.
     *
     * @param e The track event
     * @returns An element that is container for draggable items. Undefined if couldn't
     * find.
     */
    _getReorderedItem(e: Event|null): HTMLElement|null;

    /**
     * Re-positions dragged element to the place where it belongs.
     * It accounts for scroll position if it changed since dragging started.
     *
     * @param dx Delta X from starting position.
     */
    _updateDragPosition(dx: Number|null): void;

    /**
     * Scrolls tabs right or left depending on dragged element position.
     *
     * @param ddx delta from last tracked position
     */
    _updateTabPosition(ddx: Number|null): void;
  }
}
